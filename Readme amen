CREATE OR REPLACE PROCEDURE call_web_service(
  p_url IN VARCHAR2,
  p_content_type IN VARCHAR2,
  p_timeout IN NUMBER,
  p_response OUT CLOB
) AS
  req UTL_HTTP.REQ;
  resp UTL_HTTP.RESP;
BEGIN
  req := UTL_HTTP.BEGIN_REQUEST(p_url, 'GET', 'HTTP/1.1');
  UTL_HTTP.SET_HEADER(req, 'Content-Type', p_content_type);
  UTL_HTTP.SET_TRANSFER_TIMEOUT(p_timeout);
  resp := UTL_HTTP.GET_RESPONSE(req);
  DBMS_LOB.CREATETEMPORARY(p_response, TRUE);
  BEGIN
    LOOP
      UTL_HTTP.READ_TEXT(resp, p_response, 32767);
    END LOOP;
  EXCEPTION
    WHEN UTL_HTTP.END_OF_BODY THEN
      UTL_HTTP.END_RESPONSE(resp);
  END;
END;



CREATE OR REPLACE PROCEDURE call_java_ws (p_url IN VARCHAR2) AS
   req UTL_HTTP.REQ;
   res UTL_HTTP.RESP;
   buffer VARCHAR2(32767);
   resp_text VARCHAR2(32767);
BEGIN
   req := UTL_HTTP.begin_request(p_url, 'GET', 'HTTP/1.1');
   UTL_HTTP.set_header(req, 'User-Agent', 'Mozilla/4.0');
   UTL_HTTP.set_header(req, 'Accept-Charset', 'UTF-8');
   UTL_HTTP.set_header(req, 'Content-Type', 'application/x-www-form-urlencoded');
   UTL_HTTP.set_header(req, 'Content-Length', length(p_url));
   
   -- Disable SSL check
   UTL_HTTP.set_dh_trusted_cert('SSL', FALSE);

   res := UTL_HTTP.get_response(req);
   LOOP
      UTL_HTTP.read_text(res, buffer, 32766);
      resp_text := resp_text || buffer;
   END LOOP;
   UTL_HTTP.end_response(res);
   dbms_output.put_line(resp_text);
END;
/


CREATE OR REPLACE FUNCTION execute_curl(p_url VARCHAR2) RETURN VARCHAR2
IS
   l_command VARCHAR2(4000);
   l_output  VARCHAR2(4000);
BEGIN
   l_command := 'curl ' || p_url;
   l_output := UTL_TCP.OPEN_CONNECTION('localhost', 80);
   UTL_TCP.WRITE_RAW(l_output, UTL_RAW.CAST_TO_RAW(l_command));
   UTL_TCP.CLOSE_CONNECTION(l_output);
   RETURN l_command;
END;
/



BEGIN
  DBMS_SCHEDULER.CREATE_JOB(
    job_name => 'curl_job',
    job_type => 'executable',
    job_action => '/usr/bin/curl http://example.com',
    number_of_arguments => 0,
    enabled => FALSE,
    auto_drop => FALSE,
    comments => 'Job to execute curl command'
  );
END;
/






CREATE OR REPLACE TRIGGER trigger_name
AFTER INSERT ON table_name
FOR EACH ROW
BEGIN
   DBMS_SCHEDULER.ENABLE('curl_job');
   DBMS_SCHEDULER.RUN_JOB('curl_job');
END;
/

CREATE OR REPLACE PROCEDURE call_web_service(
  p_url IN VARCHAR2,
  p_content_type IN VARCHAR2,
  p_timeout IN NUMBER,
  p_response OUT CLOB
) AS
  req UTL_HTTP.REQ;
  resp UTL_HTTP.RESP;
BEGIN
  UTL_HTTP.SET_DETAILED_SQLERRM(TRUE);
  UTL_HTTP.SET_RESPONSE_ERROR_CHECK(FALSE);
  UTL_HTTP.SET_TRANSFER_TIMEOUT(p_timeout);
  UTL_HTTP.SET_SSL_VERSION('TLSv1.2');
  UTL_HTTP.SET_SECURITY_PROTOCOL('TLSv1.2');
  UTL_HTTP.SET_WALLET('file:/path/to/wallet', 'password');
  req := UTL_HTTP.BEGIN_REQUEST(p_url, 'GET', 'HTTP/1.1');
  UTL_HTTP.SET_HEADER(req, 'Content-Type', p_content_type);
  UTL_HTTP.SET_HEADER(req, 'User-Agent', 'Mozilla/5.0');
  resp := UTL_HTTP.GET_RESPONSE(req);
  DBMS_LOB.CREATETEMPORARY(p_response, TRUE);
  BEGIN
    LOOP
      UTL_HTTP.READ_TEXT(resp, p_response, 32767);
    END LOOP;
  EXCEPTION
    WHEN UTL_HTTP.END_OF_BODY THEN
      UTL_HTTP.END_RESPONSE(resp);
  END;
END;



